{
  "site": "https://interviewing.io/learn#interview-guides",
  "items": [
    {
      "title": "It's OK to postpone your interviews if you're not ready",
      "content": "We helped write the sequel to \"Cracking the Coding Interview\". Read 9 chapters for free →\n\ninterviewing.io\n\nOpen menu\n\nInterview resources\n\n- For employers\n\n- Gift mock interviews\n\n- Blog\n\n- FAQ\n\n- Log in\nGive it a try\n\n# It's OK to postpone your interviews if you're not ready\n\nBy Aline Lerner | Published:\n\nAt interviewing.io, we’ve seen hundreds of thousands of engineers go through job searches, and the biggest mistakes we see people make are all variations on the same theme: not postponing their interview when they aren’t ready.\n\nI’ve found myself repeating that it’s OK to postpone interviews so often that I finally broke down and decided to make it a blog post. It’s very simple advice, so the bulk of this post will be spent trying to convince you that it’s fine to postpone. And then of course I’ll tell you what to say.\n\nDo any of these situations sound familiar?\n\n- A recruiter from a FAANG (or other top-tier) company contacts you out of the blue and invites you to interview. You do the recruiter call, and it goes well. The recruiter reaches out to schedule your technical phone screen. You haven’t practiced enough, and you know it, but you are scared to tell the recruiter that you want to postpone the interview by a few months (months?!) because the position may no longer be there. So, you plow ahead, do the phone screen, fail it, and then you’re frozen out for a year.\n\n- You were able to postpone your technical phone screen and take the time to study up on data structures & algorithms problems. You do well in the interview. But then your recruiter schedules your onsite the following week. Because you were so focused on DS&A prep, you haven’t had much time to study up on system design. You fumble the system design interview during the onsite, and you either get rejected or get down-leveled.\n\nBoth of these situations are extremely common, but they’re both preventable. You can just ask to postpone. There are a few edge cases where that’s not a good idea, but in most situations, it’s the right thing to do.\n\n## When postponing is OK, and when you *shouldn’t* take our advice\n\nIf you’re applying to a large company with a centralized process (in other words, a process where you interview first and get matched with a team later), postponing is almost always OK. These companies are perpetually hiring, and their open roles are evergreen.1\n\nEven if you’re applying to a large company with a decentralized process (where you interview for a specific team), we recommend postponing unless you’re extremely excited about the team you’re talking to. In that scenario, it’s possible that if you postpone, the slot will be filled. But if it’s not a perfect fit and you’d be OK with another team, we recommend postponing — in the worst case, you’ll simply get slotted into a different team.\n\nThe only time when postponing isn’t a good idea is when you’re applying to a very small company that has just one open headcount. In that scenario, it is possible that postponing will cost you the opportunity because they’ll choose another candidate. However, you can ask how likely that is to happen, up front.\n\nWith that edge case out of the way, here’s a little-known fact about how timing works at large companies: Recruiters don’t really care when you interview. Though they’d prefer that you interview sooner rather than later so they can hit their numbers, at the end of the day, they’d rather be responsible for successful candidates than unsuccessful ones.\n\nEvery recruiter, in every job search, will tell you that time is of the essence because of all the other candidates in the pipeline. Most of the time, that is irrelevant and just something they say to create an artificial sense of urgency. There are always other candidates in the pipeline because the roles are evergreen. But they have nothing to do with your prospects.\n\n## Exactly what to say to postpone your interviews\n\nYou can use this text verbatim when postponing your interviews, and, with some small edits, you can even use it several times (e.g., before the phone screen and then again before the onsite).\n\n> *I’m really excited about interviewing at [company name]. Unfortunately, if I’m honest, I haven’t had a chance to practice as much as I’d like. I know how hard and competitive these interviews are, and I want to put my best foot forward. I think I’ll realistically need a couple of months to prepare. How about we schedule my interview for [date]?*\n\nOne important thing to remember is to be conservative about how long it will take. You’ve probably heard the adage about how, when you have to estimate the time an engineering task will take, you should think of a number and double it. Here, you may even want to triple it.\n\nI’ve seen many candidates ask for 2 weeks because that feels like a reasonable thing to ask for, only to have it blow up in their face when they realize they need to ask for another extension (which is still worth doing but harder because the company may think you’re taking them for a ride). If you need two months, ask for two months.\n\n## Postponing can also be a good way to control the timing of your job search\n\nThis section is extra credit, but once you get comfortable with postponing your interviews when you’re not prepared, you can use the same skills to batch your interviews and ultimately control the timing of your job search.\n\nWhat does it mean to control the timing of your job search? Ideally, you want all of your offers to come in at the same time, both because it maximizes optionality (one company that arbitrarily offers first doesn’t rush you into making a decision) and maximizes leverage (you can negotiate from a position of power).\n\nIf you want to dive deeper into this process, take a look at a book I recently co-wrote, *Beyond Cracking the Coding Interview*. It includes a full chapter about how to manage your job search, which covers everything from determining the order in which to approach companies to how to speed them up and slow them down once you’re in process. There’s a lot more detail than I can touch in this post, and much of it depends on your specific circumstances, but you can probably get 50% of the way there just by postponing your interviews in batches.\n\nThe big insight here is that, except for the edge cases we discussed above, a recruiting process can be paused at any point.\n\nIn other words, you can do a bunch of outreach to companies, then do a bunch of enthusiastic recruiter calls, and THEN pause all the processes until you’re prepared to do technical phone screens.\n\nThen, you batch the phone screens.\n\nFinally, if needed, you pause again to give yourself time to prepare for onsites. Onsite interviews require a different skill set than technical phone screens. The technical phone screen isn’t about depth or fit — it’s just a way to cut people who aren’t likely to pass the onsite.\n\nThe onsite, on the other hand, isn’t just meant to cut poor performers. It’s at once a deeper dive into your technical ability and a way to gauge fit. If you’ll be interviewing with your future team (typical at companies with a decentralized process), it’s also meant to assess your ability to work together, collaborate on hard things, complement the team's existing skillset, and so on. It usually has some coding (to verify that your technical phone screen wasn’t a fluke), but the focus is usually on system design and behavioral interviews2, which are also the interviews commonly used for leveling decisions.\n\nSo, onsite prep is much more about system design and getting your stories right for your behavioral interviews. Some people can pull off prepping for both coding and sys design/behavioral at the same time. For many, depending on their existing familiarity with the material, it’s a tall order. So, it’s wise to take the time you need and prepare.\n\nThen, once you’re ready, you batch the onsites.\n\nWhen your offers come in, you should ask for extensions as needed, speed companies up, and start negotiating (which we’ve written about in the past and which, of course, is covered at great depth in the book).\n\nFootnotes:\n\n## Footnotes\n\n1. Yes, it’s true that in 2022, we saw several FAANGs and many other companies freeze hiring, and if you had postponed your interviews, you’d have been left out in the cold. Despite how devastating these freezes were to affected candidates (and to the tech economy as whole), they are extremely rare, and in our humble opinion, not worth optimizing for or worrying about. You are very unlikely to have to deal with an impending freeze. ↩\n2. Some companies will also have technical deep dives, project presentations, assessments of niche skills, and so on. ↩\n\nLife is chaos and pain. Interview prep doesn't have to be.\n\n![Video Preview](/static/images/cyber-corgi/artboard.svg)\n\nGet instant access to anonymous mock interviews, salary negotiation, and the world's largest library of interview replays.\n\nGet started\n\n#### Related posts\n\nHow to get in the door at top companies: cold outreach to hiring managers. Part 2 of 2.\n\nBecoming an MLE at FAANG: What you need to know to know about MLE roles and interviews at Google, Meta, and other top companies\n\nI’ve conducted over 600 technical interviews on interviewing.io. Here are 5 common problem areas I’ve seen.\n\nHow do I know if I’m ready to interview at FAANG?\n\n#### Stuff we write about\n\nRecessionSalary negotiationCompany NewsData Deep DivesDiversityGuest PostsHiring is brokenInterview tipsFor employers, how to hire better\n\n### Have interviews coming up? Study up on common questions and topics.\n\nMEDIUM\n\nData Structures and Algorithms\n\n### Subarray Sum Equals K\n\nGiven an unsorted array of integers and an integer k, find the number of subarrays whose sum equals k.\n\nMEDIUM\n\nSystem Design\n\n### Distributed Databases\n\nHow would you organize a SQL database like MySQL such that you can add more machines once your current ones reach maximum capacity? With the limitation that you do not have access to any automated tools for distributing.\n\nMEDIUM\n\nData Structures and Algorithms\n\n### Build a Max Heap From an Array\n\nGiven an array of integers, transform the array in-place to a max heap.\n\nTries\n\nQuestions\n& tips\n\nStacks\n\nQuestions\n& tips\n\nSets\n\nQuestions\n& tips\n\nPriority Queues\n\nQuestions\n& tips\n\nRecursion\n\nQuestions\n& tips\n\nBinary Trees\n\nQuestions\n& tips\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.\n\n![Google Icon](/static/images/icon--google-color.svg)\n\nGet started for free\n\n![App screenshot](/_next/image?url=%2Fstatic%2Fimages%2FFooterImg.png&w=3840&q=75)",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/its-ok-to-postpone-your-interviews-if-youre-not-ready"
    },
    {
      "title": "Read nine chapters of Beyond Cracking the Coding Interview for free",
      "content": "We helped write the sequel to \"Cracking the Coding Interview\". Read 9 chapters for free →\n\ninterviewing.io\n\nOpen menu\n\nInterview resources\n\n- For employers\n\n- Gift mock interviews\n\n- Blog\n\n- FAQ\n\n- Log in\nGive it a try\n\n# Read nine chapters of Beyond Cracking the Coding Interview for free\n\nBy Aline Lerner | Published:\n\nAlong with Gayle Laakmann McDowell, Mike Mroczka, and Nil Mamano, I wrote the official sequel to *Cracking the Coding Interview*. It's fittingly called *Beyond Cracking the Coding Interview.*.\n\nNow, we're releasing 9 chapters of the book for free! There are two PDFs in the linked folder:\n\n- **The first seven chapters of the book**, covering topics such as why technical interviews are broken, what recruiters won't tell you, why not to spend a lot of time on resumes, and how to get in the door at companies without a referral.\n\n- **Two technical chapters: Sliding Windows and Binary Search**. Our new take on Binary Search teaches one template that works for every binary search problem on LeetCode, with only a single-line change you need to remember. The Sliding Windows chapter features 6 unique sliding window templates that make off-by-one errors a thing of the past.\n\nTake a look, and let me know what you think. You can reach me at aline@interviewing.io.\n\nLife is chaos and pain. Interview prep doesn't have to be.\n\n![Video Preview](/static/images/cyber-corgi/artboard.svg)\n\nGet instant access to anonymous mock interviews, salary negotiation, and the world's largest library of interview replays.\n\nGet started\n\n#### Related posts\n\nHow to get in the door at top companies: cold outreach to hiring managers. Part 2 of 2.\n\nHow hard is it to cheat in technical interviews with ChatGPT? We ran an experiment.\n\nAnnouncing the interviewing.io Technical Interview Practice Fellowship\n\ninterviewing.io is finally out of beta. Anonymous technical interview practice for all!\n\n#### Stuff we write about\n\nRecessionSalary negotiationCompany NewsData Deep DivesDiversityGuest PostsHiring is brokenInterview tipsFor employers, how to hire better\n\n### Have interviews coming up? Study up on common questions and topics.\n\nEASY\n\nData Structures and Algorithms\n\n### Reverse String\n\nWrite a program to reverse the given string.\n\nMEDIUM\n\nData Structures and Algorithms\n\n### Boundary of Binary Tree\n\nThe boundary of a binary tree is the concatenation of the root, the left boundary, the leaves ordered from left-to-right, and the reverse order of the right boundary.\n\nHARD\n\nData Structures and Algorithms\n\n### Binary Array Partition\n\nGiven an array Z of 0s and 1s, divide the array into 3 non-empty parts, such that all of these parts represent the same binary value.\n\nLinked Lists\n\nQuestions\n& tips\n\nMaps\n\nQuestions\n& tips\n\nBinary Search\n\nQuestions\n& tips\n\nBinary Trees\n\nQuestions\n& tips\n\nMapReduce\n\nQuestions\n& tips\n\nPriority Queues\n\nQuestions\n& tips\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.\n\n![Google Icon](/static/images/icon--google-color.svg)\n\nGet started for free\n\n![App screenshot](/_next/image?url=%2Fstatic%2Fimages%2FFooterImg.png&w=3840&q=75)",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/nine-free-chapters-of-beyond-cracking-the-coding-interview"
    },
    {
      "title": "How well do LeetCode ratings predict interview performance? Here's the data",
      "content": "We helped write the sequel to \"Cracking the Coding Interview\". Read 9 chapters for free →\n\ninterviewing.io\n\nOpen menu\n\nInterview resources\n\n- For employers\n\n- Gift mock interviews\n\n- Blog\n\n- FAQ\n\n- Log in\nGive it a try\n\n# How well do LeetCode ratings predict interview performance? Here's the data.\n\nBy Mike Mroczka | Published:\n\n![Author avatar](/_next/image?url=https%3A%2F%2Fstrapi-iio.s3.us-west-2.amazonaws.com%2F15_2024_03_08_Mroczka_Headshots_Ray_Glaser_Photography_DSC_3702_81cf562c2c.jpg&w=384&q=75 \"Mike Mroczka\")\n\nMike Mroczka\n\nMike Mroczka, a former senior SWE (Google, Salesforce, GE), is the primary author of Beyond Cracking the Coding Interview—the official sequel to Gayle McDowell's original CTCI. He works as a tech consultant and has a decade of experience helping engineers land their dream jobs. He’s a top-rated mentor (interviewing.io, Karat, Pathrise, Skilled.inc) and the author of viral technical content on system design and technical interview strategies featured on HackerNews, Business Insider, and Wired. He also sometimes writes technical content for interviewing.io (like this piece) and was one of the authors of interviewing.io’s A Senior Engineer's Guide to the System Design Interview.\n\nYou can find him online at mikemroczka.com and on LinkedIn.\n\nHave you ever wondered if you should spend more time on LeetCode, participate in those contests, or focus on solving harder problems? A popular Reddit post suggests you need 700+ questions and a LeetCode rating between 1800-2000 to pass FAANG interviews. Is this really what the data supports? To answer these questions and more, we looked at our users' LeetCode ranks and ratings and tied them back to interview performance on our platform and whether those users worked at FAANG.\n\nIn this post, we’ll share what we’ve learned.\n\n## The experiment\n\ninterviewing.io is an interview practice platform and recruiting marketplace for engineers. Engineers use us for mock interviews. Companies use us to hire top performers. Hundreds of thousands of engineers have used our platform to prepare for interviews, and we have performance data for over 100k technical interviews (split between real interviews and mocks).\n\nWe surveyed almost 700 of our users and asked them to share their LeetCode and LinkedIn profiles. From those profiles, we pulled our users’ employment history, as well as their LeetCode data: number of problems worked, ratings, and, if they had it, contest performance. Finally, we cross-referenced all this data with their performance in mock and real interviews on interviewing.io.\n\nThis data set allowed us to start asking interesting questions. How much LeetCoding is useful? What kinds of problems are most useful to practice? How does LeetCode performance relate to performance in interviews with real people? Do LeetCode contest scores predict interview performance, and is a competitive coder likelier to work at a big tech company? Are hard questions worth solving or should we just stick with mediums? Let's find out!\n\n## Results\n\nThe matrix below summarizes our findings. In addition to all LeetCode fields listed below, we also looked into global ratings and contest ratings. It was harder to find a large enough sample size to see any effect of those who did contests. Since the results were not large enough to be informative we have excluded them from the rest of this piece. All findings listed below are statistically significant, with lighter squares indicating stronger correlations.\n\nFor each profile, we looked at the following attributes:\n\n- **Total questions**: the total number of questions solved on LeetCode\n\n- **Hard questions**: the number of \"hard\" questions solved on LeetCode\n\n- **Medium questions**: the number of \"medium\" questions solved on LeetCode\n\n- **Easy questions**: the number of \"easy\" questions solved on LeetCode\n\n- **Worked at FAANG**: whether or not the user has ever worked at a FAANG company\n\n- **interviewing.io percentile**: how an interviewing.io user stacks up against other users of the platform, after having completed at least one interview\n\n![How much Leetcode activity correlates with interview performance and FAANG employment](/_next/image?url=https%3A%2F%2Fstrapi-iio.s3.us-west-2.amazonaws.com%2Fleetcode_activity_relationship_to_interview_performance_and_faang_empoyment_b84cc797d6.png&w=1200&q=75)\n\nHow LeetCode attributes relate to having worked at FAANG and performance in mock and real interviews on interviewing.io. Correlations range from 1 (directly positively correlated) to -1 (directly negatively correlated). 0 means there’s no relationship.\n\nThis matrix summarizes the correlations between LeetCode attributes (y axis) with 1) whether people worked at a FAANG and 2) how well they performed in interviews on interviewing.io (x axis). The higher the number (and the darker the color), the stronger the relationship.\n\nFor instance, the number of questions a user solved correlates with working at a FAANG company and a user’s percentile ranking on interviewing.io. We see that it is a stronger predictor of interview performance than it is for working at a FAANG company (0.27 and 0.17, respectively).\n\nLet's dig into the most exciting findings!\n\n### The total number of questions you have completed matters!\n\n**Unsurprisingly, the total number of questions a user has completed correlates with having FAANG on their resume and doing well in technical interviews.** Those who work at FAANG companies appear to have completed more questions than those who do not.\n\n![FAANG engineers question volume compared to nonfaang engineers](/_next/image?url=https%3A%2F%2Fstrapi-iio.s3.us-west-2.amazonaws.com%2Ffaang_engineers_question_volume_compared_to_nonfaang_engineers_301c4b7405.png&w=1200&q=75)\n\nDon't fret, though, as this doesn't mean you're doomed to be behind people who have started sooner and have amassed thousands of questions. The vast majority of our top users stop LeetCoding after they've hit about 500 questions. Only a fraction of top users have done more than ~500 questions, and only about 10 did more than a thousand questions. **As you might expect, there are seriously diminishing returns associated with doing more than 500 questions. Those who continued past the 500 questions performed only marginally better than those who had stopped near 500.**\n\n*In the zero-sum interviewing game, those who complete the most LeetCode questions generally get the highest interview scores and work at the most desirable tech companies, but completing ~500 questions will put you among the top talent in the current market.*\n\n### The difficulty level you attempt matters, too!\n\nIt is common wisdom on the LeetCode discussion board and subreddits to \"do medium questions, not hard questions,\" with the argument that companies don't ask LeetCode hards. Does this advice stand up to scrutiny? **Mostly no.**\n\nThe data shows a clear bias towards those who solved more challenging problems, the exact point at which this matters is up for debate. At interviewing.io we find that before tackling difficult questions, you just need to first start doing problems. **Getting started matters more than attempting to complete a particular question difficulty, so don't focus arbitrarily on medium/hard questions, just focus on practicing**!\n\n**Tip 1: Start with anything. Getting started matters more than picking the perfect set of questions.** For those just starting, you might think, \"I'm a straight-A student and a fast learner, so I should be able to manage hard questions.\" Don't make this mistake, or you'll burn out quickly. Instead, just focus on doing questions and getting into the habit of translating your thoughts into code efficiently.\n\n![probability of faang question difficulty](/_next/image?url=https%3A%2F%2Fstrapi-iio.s3.us-west-2.amazonaws.com%2Fprobability_of_faang_question_difficulty_a08c9d52a1.png&w=1200&q=75)\n\nThose who solved more challenging questions needed to do far fewer questions to have the same chance of getting into a FAANG company\n\n![interviewing io percentile vs total questions by difficulty](/_next/image?url=https%3A%2F%2Fstrapi-iio.s3.us-west-2.amazonaws.com%2Finterviewing_io_percentile_ee5c50d4f0.png&w=1200&q=75)\n\nThose who solved more challenging questions needed to do far fewer questions to have a high interviewing.io percentile\n\nBefore tackling mediums and hards, we need to first get good at easy questions. **Once we can tackle mediums, for each additional 50 questions you complete, you increase your score of passing your interviews by three percentage points.**\n\n**On the other hand, a LeetCode hard carries over *twice* the benefits of a medium question. Completing 50 hard questions increases your interview score by seven percentage points!** Our data shows that you'd need to complete close to 233 medium questions to get the same benefits that 100 hard questions would give. Consider these two people (fictitious but inspired by real examples in our data):\n\n| Question Difficulty | Alex | Kara |\n| --- | --- | --- |\n| Easy | 50 | 25 |\n| Medium | 630 | 50 |\n| Hard | 10 | 135 |\n| Total | 690 | 210 |\n\nThese two people are statistically likely to have similar interview scores, yet Kara completed half the number of questions Alex did. While it goes against standard advice, harder questions having a higher benefit make sense. A LeetCode medium tends to require you to do one thing (perform a DFS, scan an array, etc.) to get the correct answer. In contrast, hard questions require you to do multiple things (memoize results while performing a DFS, tally prefix sums while scanning an array, etc.). **The compounding nature of multiple tasks in harder questions necessitates deeper learning in fewer questions.**\n\nAdmittedly, there is a chicken-and-egg scenario going on here. Naively, one might think everyone should just do hard questions, but that doesn't work in practice. Jumping straight to hard questions is an infeasible leap for most people, and the reason many people can complete hard questions is precisely *because* they have finished many medium questions first. Our advice is not to jump to hard questions immediately. Instead, you should be mindful and not stay at the medium difficulty level longer than necessary. It isn't that the advice to \"do medium questions\" is wrong—it is just overused. It is natural to want to be able to complete a question regularly in a short period of time. Still, if you find yourself completing LeetCode mediums quickly, it indicates that you have stagnated and would be better off moving on to hards. If you have solved 100 or more medium questions, you'll likely get more bang for your buck by transitioning to hard.\n\n**Tip 2: Don't ignore hard questions.** Balance your medium questions with the hard ones. The compounding nature of multiple tasks in harder questions necessitates deeper learning in fewer questions.\n\nFinally, we must also acknowledge that not all hard questions are created equal. This tip is my gut feeling, and we don't have data to back it up, but intuitively, we've all done hard questions that seem *impossible*, hard questions that seemed like they should have been rated *medium*, and even medium questions that seem like they should have been *hard*. Question difficulty is somewhat subjective, so if you focus on hard questions, choose questions with a high acceptance rating and/or ones that are \"frequently asked.\" These questions tend to be *achievable* (they don't have a single impossible trick you need to just have known), *realistic* (they don't test nonsense algorithms no one knows like Manacher’s algorithm), and *solution-flexible* (there is often more than one valid approach).\n\n**Tip 3: When choosing hard questions, pick popular questions.** They are more likely to be *achievable*, *realistic*, and *solution-flexible*, which will likely result in more learning per question.\n\n### Contests and rankings don't matter\n\nSurprisingly, we found no correlation between LeetCode ratings and their interviewing percentile. Those who were great at contests also didn't appear more likely to have FAANG on their resume. Two confounding variables that might have caused these unexpected results are:\n\n1. **Small contest selection size:** Despite our best efforts, we received a relatively small group of candidates that attended any number of contests, let alone several. The data set may be too small to find a correlation.\n2. **Biased candidate selection:** We incentivized candidates with free interviews, so those who regularly complete contests (and therefore have a lot of practice and likely feel confident in their skills) might not be interested in the rewards and weren't studied in this experiment.\n\n**Tip 4: Don't worry about contests unless you enjoy them.** They provide a way to practice managing your time and keep yourself honest with how fast you are moving, but they don't contribute much to your success apart from containing more questions for you to attempt.\n\n## Conclusion\n\nIn the end, LeetCode questions are a reasonable proxy for predictors of interview performance. While ratings and contest scores don't seem to matter,1 questions —and question difficulty—do. Focus on tackling increasingly difficult questions until you've hit that point of diminishing returns near ~500. Don't stagnate with medium questions; pick popular and frequently asked hard questions, too. And don't stress if your friend has a higher LeetCode score than you do; turns out it doesn't mean much!\n\nFootnotes:\n\n## Footnotes\n\n1. A caveat here is that, strictly speaking, we're reporting correlations—not necessarily causal relationships. This leaves open the possibility that what we were measuring was not exactly a return to LeetCode but rather the effect of some third variable that increases both LeetCode activity and job prospects. For example, say MIT has a course that emphasizes coding puzzles, and MIT grads also get better jobs. In that case, what might look like a LeetCode benefit is actually an MIT benefit, and controlling for that would make the apparent benefit disappear. At the very least, though, these patterns are informative about the typical profile of successful engineers, which is likely a useful thing to emulate in general. Also, remember that our data still shows solving a healthy number of questions regardless of their difficulty can boost your chances of getting through difficult interviews. By definition, many people can pass interviews with far fewer problems completed, and many will pass after doing more problems. ↩\n\nLife is chaos and pain. Interview prep doesn't have to be.\n\n![Video Preview](/static/images/cyber-corgi/artboard.svg)\n\nGet instant access to anonymous mock interviews, salary negotiation, and the world's largest library of interview replays.\n\nGet started\n\n#### Related posts\n\nWhen is hiring coming back? Our predictions for 2024.\n\nHow is AI changing interview processes? Not much and a whole lot.\n\nThe Eng Hiring Bar: What the hell is it?\n\nImpostor syndrome strikes men just as hard as women... and other findings from thousands of technical interviews\n\n#### Stuff we write about\n\nRecessionSalary negotiationCompany NewsData Deep DivesDiversityGuest PostsHiring is brokenInterview tipsFor employers, how to hire better\n\n### Have interviews coming up? Study up on common questions and topics.\n\nMEDIUM\n\nData Structures and Algorithms\n\n### XML Parser\n\nWrite an XML parser and formatter.\n\nMEDIUM\n\nData Structures and Algorithms\n\n### Confusing Number\n\nWrite a function that, given a room with 800 BIDDERS, identifies all the confusable numbers.\n\nMEDIUM\n\nData Structures and Algorithms\n\n### Build a Max Heap From an Array\n\nGiven an array of integers, transform the array in-place to a max heap.\n\nHash Maps\n\nQuestions\n& tips\n\nDepth-First Search (DFS)\n\nQuestions\n& tips\n\nUnion Find\n\nQuestions\n& tips\n\nMatrices\n\nQuestions\n& tips\n\nSearch\n\nQuestions\n& tips\n\nSets\n\nQuestions\n& tips\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.\n\n![Google Icon](/static/images/icon--google-color.svg)\n\nGet started for free\n\n![App screenshot](/_next/image?url=%2Fstatic%2Fimages%2FFooterImg.png&w=3840&q=75)",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/how-well-do-leetcode-ratings-predict-interview-performance"
    }
  ]
}